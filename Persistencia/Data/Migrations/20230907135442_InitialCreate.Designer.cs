// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20230907135442_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_City")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Id_Region")
                        .HasColumnType("int");

                    b.Property<string>("NameCity")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NameCity");

                    b.HasKey("Id");

                    b.HasIndex("Id_Region");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("Dominio.Direccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Address")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CiudadId")
                        .HasColumnType("int");

                    b.Property<int>("Id_CityA")
                        .HasColumnType("int");

                    b.Property<int>("Id_Pa")
                        .HasColumnType("int");

                    b.Property<string>("Neigborhood")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Nameneigborhood");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NumberPlate");

                    b.Property<string>("NumberVenereableWay")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NameVenereableWay");

                    b.Property<string>("NumberWay")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NumberWay")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PaisId")
                        .HasColumnType("int");

                    b.Property<string>("QuadrantPrefix")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("QuadranPrefix");

                    b.Property<string>("TypeWay")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("TypeWay");

                    b.HasKey("Id");

                    b.HasIndex("CiudadId");

                    b.HasIndex("Id_Pa");

                    b.HasIndex("PaisId");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("Dominio.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IdPais")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameCountry")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NombrePais");

                    b.HasKey("Id");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Dominio.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_User")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_DocumentType")
                        .HasColumnType("int")
                        .HasColumnName("document_type");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("lastname");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("Id_DocumentType");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("Dominio.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Region")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_Pais")
                        .HasColumnType("int");

                    b.Property<string>("NameRegion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreRegion");

                    b.HasKey("Id");

                    b.HasIndex("Id_Pais");

                    b.ToTable("regions", (string)null);
                });

            modelBuilder.Entity("Dominio.TipoContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_ContactType")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_ContactType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Description_ContactType");

                    b.Property<string>("Name_Contact")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NameContact");

                    b.HasKey("Id");

                    b.ToTable("ContactType", (string)null);
                });

            modelBuilder.Entity("Dominio.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_User")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("Email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("Password");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar")
                        .HasColumnName("NameUser");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Dominio.UsuarioRoles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("UsuariosRoles");
                });

            modelBuilder.Entity("Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Area")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_Area")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Descriptionarea");

                    b.Property<string>("Description_Incidence")
                        .IsRequired()
                        .HasColumnType("string")
                        .HasColumnName("Id_desc_Incidence");

                    b.Property<string>("Name_Area")
                        .IsRequired()
                        .HasColumnType("string")
                        .HasColumnName("Namearea");

                    b.HasKey("Id");

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("Entities.AreaUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Area_User")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_Area")
                        .HasColumnType("int");

                    b.Property<int>("Id_Persona")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Area");

                    b.HasIndex("Id_Persona");

                    b.ToTable("AreaUser", (string)null);
                });

            modelBuilder.Entity("Entities.CategoriaContacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_CategoryContact")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int");

                    b.Property<int>("Id_Category")
                        .HasColumnType("int")
                        .HasColumnName("Id_Category");

                    b.Property<string>("Name_CategoryContact")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Name_CategoryContact");

                    b.HasKey("Id");

                    b.HasIndex("ContactoId");

                    b.ToTable("CategoryContact", (string)null);
                });

            modelBuilder.Entity("Entities.Contacto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Contact")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_Contact")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Description_Contact");

                    b.Property<int>("Id_CategoryContact")
                        .HasColumnType("int")
                        .HasColumnName("Category_Contact");

                    b.Property<int>("Id_Persona")
                        .HasColumnType("int");

                    b.Property<int>("Id_TypeContact")
                        .HasColumnType("int")
                        .HasColumnName("Type_Contact");

                    b.HasKey("Id");

                    b.HasIndex("Id_CategoryContact");

                    b.HasIndex("Id_Persona");

                    b.HasIndex("Id_TypeContact");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("Entities.DetalleIncidencia", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id_DetailIncidence")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_DetailIncidence")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Nameneigborhood");

                    b.Property<int>("Id_Incidence")
                        .HasColumnType("int");

                    b.Property<int>("Id_LevelIncidence")
                        .HasColumnType("int")
                        .HasColumnName("Id_LevelIncidence");

                    b.Property<int>("Id_Peripheral")
                        .HasColumnType("int")
                        .HasColumnName("Id_Peripheral");

                    b.Property<int>("Id_State")
                        .HasColumnType("int")
                        .HasColumnName("Id_State");

                    b.Property<int>("Id_TypeIncidence")
                        .HasColumnType("int")
                        .HasColumnName("Id_TypeIncidence");

                    b.HasKey("Id");

                    b.HasIndex("Id_LevelIncidence");

                    b.HasIndex("Id_State");

                    b.HasIndex("Id_TypeIncidence");

                    b.ToTable("DetailIncidence", (string)null);
                });

            modelBuilder.Entity("Entities.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_State")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_State")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("Description_State");

                    b.Property<int?>("DetalleIncidenciaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DetalleIncidenciaId");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("Entities.Incidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_User");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date")
                        .HasColumnName("DateIncidence");

                    b.Property<string>("Description_Incidence")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("DescriptionIncidence");

                    b.Property<string>("Detail_Incidence")
                        .HasColumnType("longtext");

                    b.Property<int>("Id_Area")
                        .HasColumnType("int")
                        .HasColumnName("Id_Area");

                    b.Property<int>("Id_Persona")
                        .HasColumnType("int")
                        .HasColumnName("Id_Incidence")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Id_Place")
                        .HasColumnType("int")
                        .HasColumnName("Id_Place");

                    b.Property<int>("Id_State")
                        .HasColumnType("int")
                        .HasColumnName("Id_State");

                    b.Property<int?>("LugarId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id_Area");

                    b.HasIndex("Id_Persona");

                    b.HasIndex("Id_State");

                    b.HasIndex("LugarId");

                    b.ToTable("Incidence", (string)null);
                });

            modelBuilder.Entity("Entities.Lugar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Place")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_Place")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("DescriptionPlace");

                    b.Property<int?>("Id_AreaOrigin")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name_Place")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NamePlace");

                    b.HasKey("Id");

                    b.HasIndex("Id_AreaOrigin");

                    b.ToTable("Place", (string)null);
                });

            modelBuilder.Entity("Entities.NivelIncidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_LevelIncidence")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_LevelIncidence")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("Description_LevelIcidence");

                    b.Property<string>("Name_LevelIncidence")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar")
                        .HasColumnName("Name_LevelIncidence");

                    b.HasKey("Id");

                    b.ToTable("LevelIncidence", (string)null);
                });

            modelBuilder.Entity("Entities.Perisferico", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("Id_Peripheral")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name_Peripheral")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar")
                        .HasColumnName("NamenePeripheral");

                    b.HasKey("Id");

                    b.ToTable("Peripheral", (string)null);
                });

            modelBuilder.Entity("Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Rol")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_Rol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("descRol");

                    b.Property<string>("Name_Rol")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NameRol");

                    b.HasKey("Id");

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("Entities.TipoDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_DocumentType")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation_DocumentType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("AbreviationDocumentTye");

                    b.Property<int?>("ContactoId")
                        .HasColumnType("int");

                    b.Property<string>("Name_DocumentType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar")
                        .HasColumnName("NameDocumentType");

                    b.HasKey("Id");

                    b.HasIndex("ContactoId");

                    b.ToTable("DocumentType", (string)null);
                });

            modelBuilder.Entity("Entities.TipoIncidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_TypeIncidence")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description_TypeIncidence")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("DescroptionTypeIncidence");

                    b.Property<string>("Name_TypeIncidence")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("NameTypeIncidence");

                    b.HasKey("Id");

                    b.ToTable("TypeIncidence", (string)null);
                });

            modelBuilder.Entity("Dominio.Ciudad", b =>
                {
                    b.HasOne("Dominio.Region", "Region")
                        .WithMany("Ciudades")
                        .HasForeignKey("Id_Region");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Dominio.Direccion", b =>
                {
                    b.HasOne("Dominio.Ciudad", null)
                        .WithMany("Direcciones")
                        .HasForeignKey("CiudadId");

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("Direcciones")
                        .HasForeignKey("Id_Pa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Pais", "Pais")
                        .WithMany()
                        .HasForeignKey("PaisId");

                    b.Navigation("Pais");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Dominio.Persona", b =>
                {
                    b.HasOne("Entities.TipoDocumento", "TipoDocumento")
                        .WithMany("Personas")
                        .HasForeignKey("Id_DocumentType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("Dominio.Region", b =>
                {
                    b.HasOne("Dominio.Pais", "Pais")
                        .WithMany("Regiones")
                        .HasForeignKey("Id_Pais")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Dominio.UsuarioRoles", b =>
                {
                    b.HasOne("Entities.Rol", "Rol")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Usuario", "Usuario")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entities.AreaUsuario", b =>
                {
                    b.HasOne("Entities.Area", "Area")
                        .WithMany("AreaUsuarios")
                        .HasForeignKey("Id_Area")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("AreaUsuarios")
                        .HasForeignKey("Id_Persona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Entities.CategoriaContacto", b =>
                {
                    b.HasOne("Entities.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoId");

                    b.Navigation("Contacto");
                });

            modelBuilder.Entity("Entities.Contacto", b =>
                {
                    b.HasOne("Entities.CategoriaContacto", "CategoriaContacto")
                        .WithMany("Contactos")
                        .HasForeignKey("Id_CategoryContact")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("Contactos")
                        .HasForeignKey("Id_Persona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.TipoContacto", "TipoContacto")
                        .WithMany("Contactos")
                        .HasForeignKey("Id_TypeContact")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaContacto");

                    b.Navigation("Persona");

                    b.Navigation("TipoContacto");
                });

            modelBuilder.Entity("Entities.DetalleIncidencia", b =>
                {
                    b.HasOne("Entities.Incidencia", "Incidencia")
                        .WithMany("DetalleIncidencia")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.NivelIncidencia", "NivelIncidencia")
                        .WithMany("DetalleIncidencia")
                        .HasForeignKey("Id_LevelIncidence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Estado", "Estado")
                        .WithMany("DetalleIncidencias")
                        .HasForeignKey("Id_State")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.TipoIncidencia", "TipoIncidencia")
                        .WithMany("DetalleIncidencias")
                        .HasForeignKey("Id_TypeIncidence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("Incidencia");

                    b.Navigation("NivelIncidencia");

                    b.Navigation("TipoIncidencia");
                });

            modelBuilder.Entity("Entities.Estado", b =>
                {
                    b.HasOne("Entities.DetalleIncidencia", "DetalleIncidencia")
                        .WithMany()
                        .HasForeignKey("DetalleIncidenciaId");

                    b.Navigation("DetalleIncidencia");
                });

            modelBuilder.Entity("Entities.Incidencia", b =>
                {
                    b.HasOne("Entities.Area", "Area")
                        .WithMany("Incidencias")
                        .HasForeignKey("Id_Area")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("Incidencias")
                        .HasForeignKey("Id_Persona")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Estado", "Estado")
                        .WithMany("Incidencias")
                        .HasForeignKey("Id_State")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Lugar", "Lugar")
                        .WithMany("Incidencias")
                        .HasForeignKey("LugarId");

                    b.Navigation("Area");

                    b.Navigation("Estado");

                    b.Navigation("Lugar");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Entities.Lugar", b =>
                {
                    b.HasOne("Entities.Area", "Area")
                        .WithMany("Places")
                        .HasForeignKey("Id_AreaOrigin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Entities.Perisferico", b =>
                {
                    b.HasOne("Entities.DetalleIncidencia", "DetalleIncidencia")
                        .WithMany("Perisfericos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetalleIncidencia");
                });

            modelBuilder.Entity("Entities.TipoDocumento", b =>
                {
                    b.HasOne("Entities.Contacto", "Contacto")
                        .WithMany()
                        .HasForeignKey("ContactoId");

                    b.Navigation("Contacto");
                });

            modelBuilder.Entity("Dominio.Ciudad", b =>
                {
                    b.Navigation("Direcciones");
                });

            modelBuilder.Entity("Dominio.Pais", b =>
                {
                    b.Navigation("Regiones");
                });

            modelBuilder.Entity("Dominio.Persona", b =>
                {
                    b.Navigation("AreaUsuarios");

                    b.Navigation("Contactos");

                    b.Navigation("Direcciones");

                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("Dominio.Region", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Dominio.TipoContacto", b =>
                {
                    b.Navigation("Contactos");
                });

            modelBuilder.Entity("Dominio.Usuario", b =>
                {
                    b.Navigation("UsuariosRoles");
                });

            modelBuilder.Entity("Entities.Area", b =>
                {
                    b.Navigation("AreaUsuarios");

                    b.Navigation("Incidencias");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("Entities.CategoriaContacto", b =>
                {
                    b.Navigation("Contactos");
                });

            modelBuilder.Entity("Entities.DetalleIncidencia", b =>
                {
                    b.Navigation("Perisfericos");
                });

            modelBuilder.Entity("Entities.Estado", b =>
                {
                    b.Navigation("DetalleIncidencias");

                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("Entities.Incidencia", b =>
                {
                    b.Navigation("DetalleIncidencia");
                });

            modelBuilder.Entity("Entities.Lugar", b =>
                {
                    b.Navigation("Incidencias");
                });

            modelBuilder.Entity("Entities.NivelIncidencia", b =>
                {
                    b.Navigation("DetalleIncidencia");
                });

            modelBuilder.Entity("Entities.Rol", b =>
                {
                    b.Navigation("UsuarioRoles");
                });

            modelBuilder.Entity("Entities.TipoDocumento", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Entities.TipoIncidencia", b =>
                {
                    b.Navigation("DetalleIncidencias");
                });
#pragma warning restore 612, 618
        }
    }
}
